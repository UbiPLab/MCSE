DE Cloud computing; Scheduling services; Evolutionary algorithms; Resource
   allocation
ID RESOURCE-ALLOCATION; SWARM OPTIMIZATION; SYSTEMS; RELIABILITY; TASKS;
   COST
AB The era of cloud computing allows the instant scale up of provided services into massive capacities without the need for investing in any new on-site infrastructure. Hence, the interest of these type of services has been increased. In addition, large companies may wish to provide support for wide range of load capacities, including peak ones. This, however, will require higher costs in order to build larger data centers internally. Cloud services can provide infrastructure, platform or software as a service for institutions or individuals that are in need for variable computation resources. Therefore, resource sharing and provisioning is considered as one of the most challenging problems in cloud-based services, as they have become more numerous and dynamic. As a result, assigning tasks and service requests into available resources has become a persistent problem in cloud computing given the large number of variables, and the increasing types of services, demand, and requirements. Scheduling services using a limited number of resources is a problem that is known to be NP-complete. Hence, heuristic-based methods are usually used in order to provide better solutions. This work discusses the formalization of the problem of scheduling multiple tasks requested by multiple users and then proposes a genetic algorithmic-based solution to schedule tasks across limited resources. The algorithm is presented and evaluated for optimum schedule that allocates a number of subtasks on a given number of resources, and the algorithm is shown to be linear versus number of users and number of resources. On the other hand, the main limitation of the proposed algorithm is that it is only applicable to the scheduling problems of multiple tasks with one price vector and one execution time vector. However, scheduling multiple users, each with subtasks that have their own price and execution time vector, is very complex problem and beyond the scope of this work, hence it will be addressed in future work.