DE Task scheduling; Collision avoidance; Task graph; Directed acyclic
   graph; Multiple I/O ports
ID GENETIC ALGORITHM; OPTIMIZATION; TASKS; FRAMEWORK; CLOUD
AB An effective scheduling algorithm for distributed computing systems is essential for assigning client's tasks to run on a set of processors at a minimum makespan. Existing algorithms permit the client tasks to be sent and received simultaneously to the processors without any possibility of collisions. This implies an unrealistic situation that there is an unlimited number of I/O ports which in fact is physically limited by the underlying architecture and technology. This paper takes this crucial constraint of I/O ports that no existing algorithm has addressed as a part of client task scheduling. Task to be scheduled are represented by a directed acyclic graph with arbitrary dependency structures and arranged by their critical paths. Two theoretical scheduling patterns under multiple I/O ports to achieve the optimal makespan with minimum latent delay are discovered and proved, namely, triangular and parallelogram patterns. They are used as the principal basis for the proposed scheduling algorithm. The focus is on collision avoidance of these tasks to be sent or received through the multiple I/O ports. Plots of task graph on performance comparison with other algorithms from the experiment show that the proposed algorithm outperforms other algorithms in terms of shorter makespan, less delay, and less number of ports used. In the real application data set, the makespan performance obtained by the proposed algorithm is better than other algorithms by 62.05%. (C) 2017 Elsevier B.V. All rights reserved.