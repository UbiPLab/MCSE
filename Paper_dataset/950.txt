DE Computation offloading; game theory; generalized network layout;
   hierarchical mobile edge computing (MEC) network
ID RESOURCE-ALLOCATION; NETWORKS; OPTIMIZATION; DESIGN; SECURITY; MODEL
AB Mobile edge computing (MEC) enhances the computing capacity of resources-poor user equipment (UE) by computational offloading. However, edge clouds suffer from a limited computation capacity, and thus cannot cater for a large amount of offloading requests in periods of high load. To tackle this issue, the hierarchical MEC network is proposed and can utilize the vast resources in the backhaul and backbone networks. Previous studies describe the network layout with a three-tier tree which is not suitable for the realistic implementation. Meanwhile, the influences brought by network congestion on backhaul and backbone links are omitted. Thus, we generalize the assumption on the network layout and propose topology-independent offloading algorithms which can balance the workload over the entire region of the MEC network. In order to relieve the congestion on the backhaul and backbone networks, the task routing is incorporated into the offloading optimization, along with the offloading decision, the transmission power control, and the cloud selection. In order to jointly conduct the offloading optimization, we convert the offloading problem into a multi-source single-destination routing. A distributed offloading approach (i.e., BROA) is developed based on the game theory, in which UE collaborates with each other to minimize the network cost in terms of energy consumption and latency. We theoretically analyze the efflciency of UE collaboration and prove that BROA can achieve the globally optimal solution. Furthermore, an approximate offloading algorithm (i.e., FCOA) is developed which can give a quick solution to adapt to time-varying environments. We theoretically demonstrate the convergence, the accuracy, and the time complexity of FCOA. Numerical results show that the proposed algorithms are superior to conventional offloading schemes.