DE Data center network (DCN) topology; Software defined networks (SDN);
   Flow priority system; Elephant flow allocation; Efficient resource
   utilization
AB During the past decades, due to the advances of the cloud computing technology with tens of thousands of processing machines, the intra data-center network traffic has increased tremendously. In data-center networks, the typical communication patterns of cloud computing technologies such as map-reduce require short latency of the request and response messages to achieve high service quality. Thus, reducing the latency has been a critical issue in data-center networking. Since latency largely depends on the utilization of the links, it is intuitive that the operators of data-center networks ay to maintain the utilization of each link under certain threshold. However, when the network is highly congested, it may not be possible to lower the utilization, which causes that most of the traffic may experience large delay.
   To overcome such degraded situation, in this paper, we propose a flow priority system, in which flows are divided into two priority types, and the packets of high priority flows are transmitted first. In other words, instead of having the large latency for all traffic flows, at least a large portion of the flows can experience lower latency. We apply the priority system only on the Elephant flows, which are usually software update or data backup messages. Thus all the short flows get high priority. One novel idea of the proposed priority system is that the priority is decided based on the amount of traffic of each link over the path. To be specific, if the assigned path to a flow consists of only low utilized links, the flow is given a high priority. Thus, depending on how to assign a path to a flow, the number of high priority flows varies. If there is no high priority path, the flow is given a low priority. To provide better quality to more flows, i.e., to have more high priority flows, we propose a novel greedy path assignment algorithm called Greedy Flows by exploiting the flexible path computation capability of SDN. We investigate the performance of the proposed algorithm with two baseline algorithms, Global First Fit and Best First Fit. Furthermore we compare the proposed algorithm with Simulated Annealing algorithm, which is a general optimization algorithm, to see how closely the proposed algorithm performs to the optimal. Through extensive simulation, we demonstrate that the proposed algorithm performs much better in path assignment than the two baseline algorithms. Furthermore Greedy Flows performs almost as good as Simulated Annealing.