DE Task analysis; Manufacturing; Quality of service; Optimization; Genetic
   algorithms; Correlation; Cloud computing; Cloud manufacturing (CMfg);
   Gale-Shapley (GS) algorithm; service composition and optimal-selection
ID SELECTION; RESOURCE; STABILITY; QUALITY; NETWORK
AB Cloud manufacturing (CMfg) is an emerging paradigm that aims to provide on-demand manufacturing services over the Internet. Service composition as an important means for generating value-added services plays an important role in achieving the aim of CMfg. Most of previous works focused on exploring techniques of service composition for a single composite task using meta-heuristic algorithms. However, the issue of service composition for multiple composite tasks has rarely been considered. Meta-heuristic algorithms suffer from cumbersome parameter tuning as well as the tendency of getting into local optima. In addition, the effectiveness of different algorithms has not yet been fully explored when different degrees of constraints are imposed. Different from approaches in most of the previous works, this paper proposes an extended Gale-Shapley (GS) algorithm-based approach for service composition that allows generation of multiple service composition solutions effectively. Requirements with different constraints are considered. Experimental results indicate that: 1) meta-heuristic algorithms can be used in various scenarios with different degrees of constraints. However, they are incapable of finding the optimal solutions in situations with relatively loose constraints, and moreover, the failure rate of finding solutions for a batch of multiple tasks is high; 2) the dynamic programming (DP) is a method that is the most sensitive to constraints. It performs better only under loose constraints and in the case of a single requirement; and 3) the application range of the GS method proposed is wider than that of the DP method. It can achieve better performance when constraints are relaxed irrespective of task status (i.e., a single task or multiple tasks), and moreover, it can make more tasks find solutions in the multitask scenario without service reuse.